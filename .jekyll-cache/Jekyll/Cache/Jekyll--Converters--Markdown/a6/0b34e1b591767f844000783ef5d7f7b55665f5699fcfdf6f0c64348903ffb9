I"v<p>So, I was working on a a simple javascript game this weekend and I’ve
implemented the core game mechanics, initial world generation, and user
interface to display the score, instructions, etc. I’m feeling pretty good
about it, but then I had the daunting task of building levels. This was seeming
like it would be the most time consuming part of the whole ordeal and it was
honestly starting to seem like a pain.</p>

<p>Most tutorials for building your first HTML/Javascript game start out by
showing you how render objects on the screen, bind event handlers to those
objects so that you can move them around, and origanize your logic into
functions and/or classes. This works great for creating an initial demo, where
you can show off your game mechanics, but it’s not quite a game yet, in my
opinion. Not only should a game have a goal that is achievable through its
mechanics, it should also have a sense of progression. After you
beat the challenge, something should happen. You should progress to something
more challenging. This is the part most beginner tutorials leave out.</p>

<p>I found a few implementations for levels in Javascript games, but none of them
quite fit the design I was going for in my code. Some implementations created
complex state machines to control the levels in a game. The problem with this
is that the state machine idea is a bit over the top for my simple linear game.
Upon completing a level, there is only one possible outcome… the next level.
There are no complex branching or conditional terminal states and I wanted a
design that reflected that simplicity. Building a state machine seemed a bit
like using an armored delivery truck to go the store. Sure, it would work great
and my groceries would be really safe, but I’m sure any regular old minivan
could do the trick too. So I kept searching.</p>

<p>I was faced with a few design choices. Either</p>

:ET